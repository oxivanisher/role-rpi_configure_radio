---
# ensure mounted boot
- name: Override config.txt location for Raspberry Pi OS version before bookworm
  ansible.builtin.set_fact:
    rpi_configure_radio_config_dir: /boot
  when: ansible_distribution_major_version | int < 12

- name: Override Raspberry PI boot device default since raspberry_pi_boot_dev is set
  ansible.builtin.set_fact:
    rpi_configure_radio_rpi_boot_dev: "{{ raspberry_pi_boot_dev }}"
  when: raspberry_pi_boot_dev | default('', true) | trim != ''

- name: Mount boot
  ansible.posix.mount:
    path: "{{ rpi_configure_radio_config_dir }}"
    state: mounted
    src: "{{ rpi_configure_radio_rpi_boot_dev }}"
    fstype: vfat
  changed_when: false
  become: true
  become_user: root

- name: "Disable wifi in config.txt"
  ansible.builtin.lineinfile:
    path: "{{ rpi_configure_radio_config_dir }}/config.txt"
    regexp: "dtoverlay=disable-wifi"
    line: "dtoverlay=disable-wifi"
  notify: Reboot required
  when: rpi_configure_radio_disable_wifi
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: "Enable wifi in config.txt"
  ansible.builtin.lineinfile:
    path: "{{ rpi_configure_radio_config_dir }}/config.txt"
    regexp: "dtoverlay=disable-wifi"
    line: "#dtoverlay=disable-wifi"
  notify: Reboot required
  when: not rpi_configure_radio_disable_wifi
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: "Disable bluetooth in config.txt"
  ansible.builtin.lineinfile:
    path: "{{ rpi_configure_radio_config_dir }}/config.txt"
    regexp: "dtoverlay=disable-bt"
    line: "dtoverlay=disable-bt"
  notify: Reboot required
  when: rpi_configure_radio_disable_bt
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: "Enable bluetooth in config.txt"
  ansible.builtin.lineinfile:
    path: "{{ rpi_configure_radio_config_dir }}/config.txt"
    regexp: "dtoverlay=disable-bt"
    line: "#dtoverlay=disable-bt"
  notify: Reboot required
  when: not rpi_configure_radio_disable_bt
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

# Inspired by https://github.com/guysoft/OctoPi/issues/508
- name: Remove buggy wlan0 powersave file from octopi
  ansible.builtin.file:
    path: /etc/network/if-up.d/powersave_off
    state: absent
  become: true
  become_user: root

- name: Configure wifi before bookworm
  when: ansible_distribution_major_version | int < 12
  block:
    - name: Create systemd unit to handle wifi powersave
      ansible.builtin.copy:
        src: wifi_powersave@.service
        dest: /etc/systemd/system/wifi_powersave@.service
        owner: root
        group: root
        mode: "0644"
      become: true
      become_user: root

    - name: Enable the systemd unit to handle wifi powersave
      ansible.builtin.service:
        name: wifi_powersave@off.service
        state: started
        enabled: true
        daemon_reload: true
      when: not rpi_configure_radio_disable_wifi
      ignore_errors: "{{ ansible_check_mode }}"
      become: true
      become_user: root

    - name: Disable the systemd unit to handle wifi powersave
      ansible.builtin.service:
        name: wifi_powersave@off.service
        enabled: false
        daemon_reload: true
      when: rpi_configure_radio_disable_wifi
      ignore_errors: "{{ ansible_check_mode }}"
      become: true
      become_user: root

- name: Configure wifi starting from bookworm (NetworkManager)
  when: ansible_distribution_major_version | int >= 12
  block:
    - name: Gather facts about running services
      ansible.builtin.service_facts:

    - name: Create NetworkManager file to configure wifi.powersave
      ansible.builtin.copy:
        src: default-wifi-powersave.conf
        dest: /etc/NetworkManager/conf.d/default-wifi-powersave.conf
        owner: root
        group: root
        mode: "0644"
      notify: Restart NetworkManager
      when: "ansible_facts.services['NetworkManager.service']['state'] == 'running'"
      become: true
      become_user: root
